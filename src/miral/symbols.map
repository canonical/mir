MIRAL_5.0 {
global:
  extern "C++" {
    "miral::AddInitCallback::AddInitCallback(const Callback &)";
    "miral::AddInitCallback::operator()(mir::Server &) const";
    "miral::AddInitCallback::~AddInitCallback()";
    "miral::AppendEventFilter::AppendEventFilter(const int &)";
    "miral::AppendEventFilter::operator()(mir::Server &)";
    "miral::ApplicationAuthorizer::ApplicationAuthorizer()";
    "miral::ApplicationAuthorizer::ApplicationAuthorizer(const ApplicationAuthorizer &)";
    "miral::ApplicationAuthorizer::operator=(const ApplicationAuthorizer &)";
    "miral::ApplicationAuthorizer::~ApplicationAuthorizer()";
    "miral::ApplicationCredentials::ApplicationCredentials(const mir::frontend::SessionCredentials &)";
    "miral::ApplicationCredentials::gid() const";
    "miral::ApplicationCredentials::pid() const";
    "miral::ApplicationCredentials::uid() const";
    "miral::ApplicationInfo::ApplicationInfo()";
    "miral::ApplicationInfo::ApplicationInfo(const Application &)";
    "miral::ApplicationInfo::ApplicationInfo(const ApplicationInfo &)";
    "miral::ApplicationInfo::application() const";
    "miral::ApplicationInfo::name() const";
    "miral::ApplicationInfo::operator=(const ApplicationInfo &)";
    "miral::ApplicationInfo::userdata() const";
    "miral::ApplicationInfo::userdata(std::shared_ptr<void>)";
    "miral::ApplicationInfo::windows() const";
    "miral::ApplicationInfo::~ApplicationInfo()";
    "miral::BasicSetApplicationAuthorizer::BasicSetApplicationAuthorizer(const int &)";
    "miral::BasicSetApplicationAuthorizer::operator()(mir::Server &)";
    "miral::BasicSetApplicationAuthorizer::the_application_authorizer() const";
    "miral::BasicSetApplicationAuthorizer::~BasicSetApplicationAuthorizer()";
    "miral::CanonicalWindowManagerPolicy::CanonicalWindowManagerPolicy(const WindowManagerTools &)";
    "miral::CanonicalWindowManagerPolicy::advise_focus_gained(const WindowInfo &)";
    "miral::CanonicalWindowManagerPolicy::confirm_inherited_move(const WindowInfo &, Displacement)";
    "miral::CanonicalWindowManagerPolicy::confirm_placement_on_display(const WindowInfo &, MirWindowState, const Rectangle &)";
    "miral::CanonicalWindowManagerPolicy::handle_modify_window(WindowInfo &, const WindowSpecification &)";
    "miral::CanonicalWindowManagerPolicy::handle_raise_window(WindowInfo &)";
    "miral::CanonicalWindowManagerPolicy::handle_window_ready(WindowInfo &)";
    "miral::CanonicalWindowManagerPolicy::place_new_window(const ApplicationInfo &, const WindowSpecification &)";
    "miral::ConfigurationOption::ConfigurationOption(const ConfigurationOption &)";
    "miral::ConfigurationOption::ConfigurationOption(int, const int &, const int &)";
    "miral::ConfigurationOption::ConfigurationOption(int, const int &, const int &, bool)";
    "miral::ConfigurationOption::ConfigurationOption(int, const int &, const int &, const char *)";
    "miral::ConfigurationOption::ConfigurationOption(int, const int &, const int &, const int &)";
    "miral::ConfigurationOption::ConfigurationOption(int, const int &, const int &, double)";
    "miral::ConfigurationOption::ConfigurationOption(int, const int &, const int &, int)";
    "miral::ConfigurationOption::operator()(mir::Server &) const";
    "miral::ConfigurationOption::operator=(const ConfigurationOption &)";
    "miral::ConfigurationOption::~ConfigurationOption()";
    "miral::CursorTheme::CursorTheme(const std::string &)";
    "miral::CursorTheme::operator()(mir::Server &) const";
    "miral::CursorTheme::~CursorTheme()";
    "miral::DisplayConfiguration::DisplayConfiguration(const DisplayConfiguration &)";
    "miral::DisplayConfiguration::DisplayConfiguration(const MirRunner &)";
    "miral::DisplayConfiguration::add_output_attribute(const int &)";
    "miral::DisplayConfiguration::layout_option()";
    "miral::DisplayConfiguration::list_layouts()";
    "miral::DisplayConfiguration::operator()(mir::Server &) const";
    "miral::DisplayConfiguration::operator=(const DisplayConfiguration &)";
    "miral::DisplayConfiguration::select_layout(const int &)";
    "miral::DisplayConfiguration::~DisplayConfiguration()";
    "miral::ExternalClientLauncher::ExternalClientLauncher()";
    "miral::ExternalClientLauncher::launch(const int &) const";
    "miral::ExternalClientLauncher::launch_using_x11(const int &) const";
    "miral::ExternalClientLauncher::operator()(mir::Server &)";
    "miral::ExternalClientLauncher::snapcraft_launch(const int &) const";
    "miral::ExternalClientLauncher::split_command(const int &)";
    "miral::ExternalClientLauncher::~ExternalClientLauncher()";
    "miral::FdHandle::~FdHandle()";
    "miral::InternalClientLauncher::InternalClientLauncher()";
    "miral::InternalClientLauncher::launch(const int &, const int &) const";
    "miral::InternalClientLauncher::operator()(mir::Server &)";
    "miral::InternalClientLauncher::~InternalClientLauncher()";
    "miral::Keymap::Keymap()";
    "miral::Keymap::Keymap(const Keymap &)";
    "miral::Keymap::Keymap(const int &)";
    "miral::Keymap::operator()(mir::Server &) const";
    "miral::Keymap::operator=(const Keymap &)";
    "miral::Keymap::set_keymap(const int &)";
    "miral::Keymap::~Keymap()";
    "miral::MinimalWindowManager::MinimalWindowManager(const WindowManagerTools &)";
    "miral::MinimalWindowManager::MinimalWindowManager(const WindowManagerTools &, MirInputEventModifier)";
    "miral::MinimalWindowManager::advise_delete_app(const miral::ApplicationInfo &)";
    "miral::MinimalWindowManager::advise_delete_window(const WindowInfo &)";
    "miral::MinimalWindowManager::advise_focus_gained(const WindowInfo &)";
    "miral::MinimalWindowManager::advise_focus_lost(const WindowInfo &)";
    "miral::MinimalWindowManager::advise_new_app(miral::ApplicationInfo &)";
    "miral::MinimalWindowManager::advise_new_window(const WindowInfo &)";
    "miral::MinimalWindowManager::begin_pointer_move(const WindowInfo &, const MirInputEvent *)";
    "miral::MinimalWindowManager::begin_pointer_resize(const WindowInfo &, const MirInputEvent *, const MirResizeEdge &)";
    "miral::MinimalWindowManager::begin_touch_move(const WindowInfo &, const MirInputEvent *)";
    "miral::MinimalWindowManager::begin_touch_resize(const WindowInfo &, const MirInputEvent *, const MirResizeEdge &)";
    "miral::MinimalWindowManager::confirm_inherited_move(const WindowInfo &, Displacement)";
    "miral::MinimalWindowManager::confirm_placement_on_display(const WindowInfo &, MirWindowState, const Rectangle &)";
    "miral::MinimalWindowManager::handle_keyboard_event(const MirKeyboardEvent *)";
    "miral::MinimalWindowManager::handle_modify_window(WindowInfo &, const WindowSpecification &)";
    "miral::MinimalWindowManager::handle_pointer_event(const MirPointerEvent *)";
    "miral::MinimalWindowManager::handle_raise_window(WindowInfo &)";
    "miral::MinimalWindowManager::handle_request_move(WindowInfo &, const MirInputEvent *)";
    "miral::MinimalWindowManager::handle_request_resize(WindowInfo &, const MirInputEvent *, MirResizeEdge)";
    "miral::MinimalWindowManager::handle_touch_event(const MirTouchEvent *)";
    "miral::MinimalWindowManager::handle_window_ready(WindowInfo &)";
    "miral::MinimalWindowManager::place_new_window(const ApplicationInfo &, const WindowSpecification &)";
    "miral::MinimalWindowManager::~MinimalWindowManager()";
    "miral::MirRunner::MirRunner(int, const char **)";
    "miral::MirRunner::MirRunner(int, const char **, const char *)";
    "miral::MirRunner::add_start_callback(const std::function<void ()> &)";
    "miral::MirRunner::add_stop_callback(const std::function<void ()> &)";
    "miral::MirRunner::config_file() const";
    "miral::MirRunner::display_config_file() const";
    "miral::MirRunner::register_fd_handler(mir::Fd, const std::function<void (int)> &)";
    "miral::MirRunner::register_signal_handler(int, const std::function<void (int)> &)";
    "miral::MirRunner::run_with(int)";
    "miral::MirRunner::set_exception_handler(const std::function<void ()> &)";
    "miral::MirRunner::stop()";
    "miral::MirRunner::wayland_display() const";
    "miral::MirRunner::x11_display() const";
    "miral::MirRunner::~MirRunner()";
    "miral::Output::Output(const Output &)";
    "miral::Output::Output(const mir::graphics::DisplayConfigurationOutput &)";
    "miral::Output::Type";
    "miral::Output::attribute(const int &) const";
    "miral::Output::attributes_map() const";
    "miral::Output::connected() const";
    "miral::Output::extents() const";
    "miral::Output::form_factor() const";
    "miral::Output::id() const";
    "miral::Output::is_same_output(const Output &) const";
    "miral::Output::logical_group_id() const";
    "miral::Output::name() const";
    "miral::Output::operator=(const Output &)";
    "miral::Output::orientation() const";
    "miral::Output::physical_size_mm() const";
    "miral::Output::pixel_format() const";
    "miral::Output::power_mode() const";
    "miral::Output::refresh_rate() const";
    "miral::Output::scale() const";
    "miral::Output::type() const";
    "miral::Output::used() const";
    "miral::Output::valid() const";
    "miral::Output::~Output()";
    "miral::PrependEventFilter::PrependEventFilter(const int &)";
    "miral::PrependEventFilter::operator()(mir::Server &)";
    "miral::PrintTo(const Window &, int *)";
    "miral::SessionLockListener::SessionLockListener(const int &, const int &)";
    "miral::SessionLockListener::operator()(mir::Server &) const";
    "miral::SessionLockListener::~SessionLockListener()";
    "miral::SetCommandLineHandler::SetCommandLineHandler(const Handler &)";
    "miral::SetCommandLineHandler::operator()(mir::Server &) const";
    "miral::SetCommandLineHandler::~SetCommandLineHandler()";
    "miral::SetTerminator::SetTerminator(const Terminator &)";
    "miral::SetTerminator::operator()(mir::Server &) const";
    "miral::SetTerminator::~SetTerminator()";
    "miral::SetWindowManagementPolicy::SetWindowManagementPolicy(int (*)(const WindowManagerTools &))";
    "miral::SetWindowManagementPolicy::operator()(mir::Server &) const";
    "miral::SetWindowManagementPolicy::~SetWindowManagementPolicy()";
    "miral::StartupInternalClient::StartupInternalClient(int, int)";
    "miral::StartupInternalClient::operator()(mir::Server &)";
    "miral::StartupInternalClient::~StartupInternalClient()";
    "miral::WaylandExtensions::Context::Context()";
    "miral::WaylandExtensions::Context::Context(const Context &)";
    "miral::WaylandExtensions::Context::operator=(const Context &)";
    "miral::WaylandExtensions::Context::~Context()";
    "miral::WaylandExtensions::EnableInfo::app() const";
    "miral::WaylandExtensions::EnableInfo::name() const";
    "miral::WaylandExtensions::EnableInfo::user_preference() const";
    "miral::WaylandExtensions::WaylandExtensions()";
    "miral::WaylandExtensions::WaylandExtensions(const WaylandExtensions &)";
    "miral::WaylandExtensions::add_extension(const Builder &)";
    "miral::WaylandExtensions::add_extension_disabled_by_default(const Builder &)";
    "miral::WaylandExtensions::all_supported() const";
    "miral::WaylandExtensions::conditionally_enable(int, const EnableCallback &)";
    "miral::WaylandExtensions::disable(int)";
    "miral::WaylandExtensions::enable(int)";
    "miral::WaylandExtensions::ext_session_lock_manager_v1";
    "miral::WaylandExtensions::operator()(mir::Server &) const";
    "miral::WaylandExtensions::operator=(const WaylandExtensions &)";
    "miral::WaylandExtensions::recommended()";
    "miral::WaylandExtensions::supported()";
    "miral::WaylandExtensions::zwlr_foreign_toplevel_manager_v1";
    "miral::WaylandExtensions::zwlr_layer_shell_v1";
    "miral::WaylandExtensions::zwlr_screencopy_manager_v1";
    "miral::WaylandExtensions::zwlr_virtual_pointer_manager_v1";
    "miral::WaylandExtensions::zwp_input_method_manager_v2";
    "miral::WaylandExtensions::zwp_input_method_v1";
    "miral::WaylandExtensions::zwp_input_panel_v1";
    "miral::WaylandExtensions::zwp_virtual_keyboard_manager_v1";
    "miral::WaylandExtensions::zxdg_output_manager_v1";
    "miral::WaylandExtensions::~WaylandExtensions()";
    "miral::Window::Window()";
    "miral::Window::Window(const Application &, const std::shared_ptr<mir::scene::Surface> &)";
    "miral::Window::application() const";
    "miral::Window::move_to(mir::geometry::Point)";
    "miral::Window::operator bool() const";
    "miral::Window::operator std::shared_ptr<mir::scene::Surface>() const";
    "miral::Window::operator std::weak_ptr<mir::scene::Surface>() const";
    "miral::Window::resize(const mir::geometry::Size &)";
    "miral::Window::size() const";
    "miral::Window::top_left() const";
    "miral::Window::~Window()";
    "miral::WindowInfo::WindowInfo()";
    "miral::WindowInfo::WindowInfo(const Window &, const WindowSpecification &)";
    "miral::WindowInfo::WindowInfo(const WindowInfo &)";
    "miral::WindowInfo::application_id() const";
    "miral::WindowInfo::attached_edges() const";
    "miral::WindowInfo::can_be_active() const";
    "miral::WindowInfo::can_morph_to(MirWindowType) const";
    "miral::WindowInfo::children() const";
    "miral::WindowInfo::clip_area() const";
    "miral::WindowInfo::clip_area(const mir::optional_value<mir::geometry::Rectangle> &)";
    "miral::WindowInfo::confine_pointer() const";
    "miral::WindowInfo::constrain_resize(mir::geometry::Point &, mir::geometry::Size &) const";
    "miral::WindowInfo::depth_layer() const";
    "miral::WindowInfo::exclusive_rect() const";
    "miral::WindowInfo::focus_mode() const";
    "miral::WindowInfo::has_output_id() const";
    "miral::WindowInfo::height_inc() const";
    "miral::WindowInfo::ignore_exclusion_zones() const";
    "miral::WindowInfo::is_visible() const";
    "miral::WindowInfo::max_aspect() const";
    "miral::WindowInfo::max_height() const";
    "miral::WindowInfo::max_width() const";
    "miral::WindowInfo::min_aspect() const";
    "miral::WindowInfo::min_height() const";
    "miral::WindowInfo::min_width() const";
    "miral::WindowInfo::must_have_parent() const";
    "miral::WindowInfo::must_not_have_parent() const";
    "miral::WindowInfo::name() const";
    "miral::WindowInfo::needs_titlebar(MirWindowType)";
    "miral::WindowInfo::operator=(const WindowInfo &)";
    "miral::WindowInfo::output_id() const";
    "miral::WindowInfo::parent() const";
    "miral::WindowInfo::preferred_orientation() const";
    "miral::WindowInfo::restore_rect() const";
    "miral::WindowInfo::shell_chrome() const";
    "miral::WindowInfo::state() const";
    "miral::WindowInfo::swap(WindowInfo &)";
    "miral::WindowInfo::type() const";
    "miral::WindowInfo::userdata() const";
    "miral::WindowInfo::userdata(std::shared_ptr<void>)";
    "miral::WindowInfo::visible_on_lock_screen() const";
    "miral::WindowInfo::width_inc() const";
    "miral::WindowInfo::window() const";
    "miral::WindowInfo::~WindowInfo()";
    "miral::WindowManagementPolicy::WindowManagementPolicy()";
    "miral::WindowManagementPolicy::WindowManagementPolicy(const WindowManagementPolicy &)";
    "miral::WindowManagementPolicy::advise_adding_to_workspace(const std::shared_ptr<Workspace> &, const int &)";
    "miral::WindowManagementPolicy::advise_application_zone_create(const Zone &)";
    "miral::WindowManagementPolicy::advise_application_zone_delete(const Zone &)";
    "miral::WindowManagementPolicy::advise_application_zone_update(const Zone &, const Zone &)";
    "miral::WindowManagementPolicy::advise_begin()";
    "miral::WindowManagementPolicy::advise_delete_app(const ApplicationInfo &)";
    "miral::WindowManagementPolicy::advise_delete_window(const WindowInfo &)";
    "miral::WindowManagementPolicy::advise_end()";
    "miral::WindowManagementPolicy::advise_focus_gained(const WindowInfo &)";
    "miral::WindowManagementPolicy::advise_focus_lost(const WindowInfo &)";
    "miral::WindowManagementPolicy::advise_move_to(const WindowInfo &, Point)";
    "miral::WindowManagementPolicy::advise_new_app(ApplicationInfo &)";
    "miral::WindowManagementPolicy::advise_new_window(const WindowInfo &)";
    "miral::WindowManagementPolicy::advise_output_create(const Output &)";
    "miral::WindowManagementPolicy::advise_output_delete(const Output &)";
    "miral::WindowManagementPolicy::advise_output_update(const Output &, const Output &)";
    "miral::WindowManagementPolicy::advise_raise(const int &)";
    "miral::WindowManagementPolicy::advise_removing_from_workspace(const std::shared_ptr<Workspace> &, const int &)";
    "miral::WindowManagementPolicy::advise_resize(const WindowInfo &, const Size &)";
    "miral::WindowManagementPolicy::advise_state_change(const WindowInfo &, MirWindowState)";
    "miral::WindowManagementPolicy::operator=(const WindowManagementPolicy &)";
    "miral::WindowManagementPolicy::~WindowManagementPolicy()";
    "miral::WindowManagerOptions::WindowManagerOptions()";
    "miral::WindowManagerOptions::WindowManagerOptions(const int &)";
    "miral::WindowManagerOptions::operator()(mir::Server &) const";
    "miral::WindowManagerTools::WindowManagerTools(WindowManagerToolsImplementation *)";
    "miral::WindowManagerTools::WindowManagerTools(const WindowManagerTools &)";
    "miral::WindowManagerTools::active_application_zone() const";
    "miral::WindowManagerTools::active_output()";
    "miral::WindowManagerTools::active_window() const";
    "miral::WindowManagerTools::add_tree_to_workspace(const Window &, const std::shared_ptr<Workspace> &)";
    "miral::WindowManagerTools::ask_client_to_close(const Window &)";
    "miral::WindowManagerTools::can_select_window(const Window &) const";
    "miral::WindowManagerTools::count_applications() const";
    "miral::WindowManagerTools::create_workspace()";
    "miral::WindowManagerTools::drag_active_window(mir::geometry::Displacement)";
    "miral::WindowManagerTools::drag_window(const Window &, mir::geometry::Displacement)";
    "miral::WindowManagerTools::find_application(const std::function<bool (const ApplicationInfo &)> &)";
    "miral::WindowManagerTools::focus_next_application()";
    "miral::WindowManagerTools::focus_next_within_application()";
    "miral::WindowManagerTools::focus_prev_application()";
    "miral::WindowManagerTools::focus_prev_within_application()";
    "miral::WindowManagerTools::for_each_application(const std::function<void (ApplicationInfo &)> &)";
    "miral::WindowManagerTools::for_each_window_in_workspace(const std::shared_ptr<Workspace> &, const std::function<void (const Window &)> &)";
    "miral::WindowManagerTools::for_each_workspace_containing(const Window &, const std::function<void (const std::shared_ptr<Workspace> &)> &)";
    "miral::WindowManagerTools::id_for_window(const Window &) const";
    "miral::WindowManagerTools::info_for(const Window &) const";
    "miral::WindowManagerTools::info_for(const std::weak_ptr<mir::scene::Session> &) const";
    "miral::WindowManagerTools::info_for(const std::weak_ptr<mir::scene::Surface> &) const";
    "miral::WindowManagerTools::info_for_window_id(const int &) const";
    "miral::WindowManagerTools::invoke_under_lock(const std::function<void ()> &)";
    "miral::WindowManagerTools::modify_window(WindowInfo &, const WindowSpecification &)";
    "miral::WindowManagerTools::modify_window(const Window &, const WindowSpecification &)";
    "miral::WindowManagerTools::move_workspace_content_to_workspace(const std::shared_ptr<Workspace> &, const std::shared_ptr<Workspace> &)";
    "miral::WindowManagerTools::operator=(const WindowManagerTools &)";
    "miral::WindowManagerTools::place_and_size_for_state(WindowSpecification &, const WindowInfo &) const";
    "miral::WindowManagerTools::raise_tree(const Window &)";
    "miral::WindowManagerTools::remove_tree_from_workspace(const Window &, const std::shared_ptr<Workspace> &)";
    "miral::WindowManagerTools::select_active_window(const Window &)";
    "miral::WindowManagerTools::send_tree_to_back(const Window &)";
    "miral::WindowManagerTools::swap_tree_order(const Window &, const Window &)";
    "miral::WindowManagerTools::window_at(mir::geometry::Point) const";
    "miral::WindowManagerTools::window_to_select_application(const Application) const";
    "miral::WindowManagerTools::~WindowManagerTools()";
    "miral::WindowSpecification::InputReceptionMode";
    "miral::WindowSpecification::WindowSpecification()";
    "miral::WindowSpecification::WindowSpecification(const WindowSpecification &)";
    "miral::WindowSpecification::WindowSpecification(const mir::shell::SurfaceSpecification &)";
    "miral::WindowSpecification::application_id() const";
    "miral::WindowSpecification::application_id()";
    "miral::WindowSpecification::attached_edges() const";
    "miral::WindowSpecification::attached_edges()";
    "miral::WindowSpecification::aux_rect() const";
    "miral::WindowSpecification::aux_rect()";
    "miral::WindowSpecification::aux_rect_placement_gravity() const";
    "miral::WindowSpecification::aux_rect_placement_gravity()";
    "miral::WindowSpecification::aux_rect_placement_offset() const";
    "miral::WindowSpecification::aux_rect_placement_offset()";
    "miral::WindowSpecification::confine_pointer() const";
    "miral::WindowSpecification::confine_pointer()";
    "miral::WindowSpecification::depth_layer() const";
    "miral::WindowSpecification::depth_layer()";
    "miral::WindowSpecification::exclusive_rect() const";
    "miral::WindowSpecification::exclusive_rect()";
    "miral::WindowSpecification::focus_mode() const";
    "miral::WindowSpecification::focus_mode()";
    "miral::WindowSpecification::height_inc() const";
    "miral::WindowSpecification::height_inc()";
    "miral::WindowSpecification::ignore_exclusion_zones() const";
    "miral::WindowSpecification::ignore_exclusion_zones()";
    "miral::WindowSpecification::input_mode() const";
    "miral::WindowSpecification::input_mode()";
    "miral::WindowSpecification::input_shape() const";
    "miral::WindowSpecification::input_shape()";
    "miral::WindowSpecification::max_aspect() const";
    "miral::WindowSpecification::max_aspect()";
    "miral::WindowSpecification::max_height() const";
    "miral::WindowSpecification::max_height()";
    "miral::WindowSpecification::max_width() const";
    "miral::WindowSpecification::max_width()";
    "miral::WindowSpecification::min_aspect() const";
    "miral::WindowSpecification::min_aspect()";
    "miral::WindowSpecification::min_height() const";
    "miral::WindowSpecification::min_height()";
    "miral::WindowSpecification::min_width() const";
    "miral::WindowSpecification::min_width()";
    "miral::WindowSpecification::name() const";
    "miral::WindowSpecification::name()";
    "miral::WindowSpecification::operator=(const WindowSpecification &)";
    "miral::WindowSpecification::output_id() const";
    "miral::WindowSpecification::output_id()";
    "miral::WindowSpecification::parent() const";
    "miral::WindowSpecification::parent()";
    "miral::WindowSpecification::placement_hints() const";
    "miral::WindowSpecification::placement_hints()";
    "miral::WindowSpecification::preferred_orientation() const";
    "miral::WindowSpecification::preferred_orientation()";
    "miral::WindowSpecification::server_side_decorated() const";
    "miral::WindowSpecification::server_side_decorated()";
    "miral::WindowSpecification::shell_chrome() const";
    "miral::WindowSpecification::shell_chrome()";
    "miral::WindowSpecification::size() const";
    "miral::WindowSpecification::size()";
    "miral::WindowSpecification::state() const";
    "miral::WindowSpecification::state()";
    "miral::WindowSpecification::top_left() const";
    "miral::WindowSpecification::top_left()";
    "miral::WindowSpecification::type() const";
    "miral::WindowSpecification::type()";
    "miral::WindowSpecification::userdata() const";
    "miral::WindowSpecification::userdata()";
    "miral::WindowSpecification::visible_on_lock_screen() const";
    "miral::WindowSpecification::visible_on_lock_screen()";
    "miral::WindowSpecification::width_inc() const";
    "miral::WindowSpecification::width_inc()";
    "miral::WindowSpecification::window_placement_gravity() const";
    "miral::WindowSpecification::window_placement_gravity()";
    "miral::WindowSpecification::~WindowSpecification()";
    "miral::X11Support::X11Support()";
    "miral::X11Support::X11Support(const X11Support &)";
    "miral::X11Support::default_to_enabled()";
    "miral::X11Support::operator()(mir::Server &) const";
    "miral::X11Support::operator=(const X11Support &)";
    "miral::X11Support::~X11Support()";
    "miral::Zone::Zone(const Rectangle &)";
    "miral::Zone::Zone(const Zone &)";
    "miral::Zone::extents() const";
    "miral::Zone::extents(const Rectangle &)";
    "miral::Zone::id() const";
    "miral::Zone::is_same_zone(const Zone &) const";
    "miral::Zone::operator=(const Zone &)";
    "miral::Zone::operator==(const Zone &) const";
    "miral::Zone::~Zone()";
    "miral::application_for(wl_client *)";
    "miral::application_for(wl_resource *)";
    "miral::apply_lifecycle_state_to(const Application &, MirLifecycleState)";
    "miral::display_configuration_options(mir::Server &)";
    "miral::equivalent_display_area(const Output &, const Output &)";
    "miral::kill(const Application &, int)";
    "miral::name_of(const Application &)";
    "miral::operator!=(const Output::PhysicalSizeMM &, const Output::PhysicalSizeMM &)";
    "miral::operator!=(const Window &, const Window &)";
    "miral::operator!=(const Window &, const std::shared_ptr<mir::scene::Surface> &)";
    "miral::operator!=(const std::shared_ptr<mir::scene::Surface> &, const Window &)";
    "miral::operator<(const Window &, const Window &)";
    "miral::operator<=(const Window &, const Window &)";
    "miral::operator==(const Output::PhysicalSizeMM &, const Output::PhysicalSizeMM &)";
    "miral::operator==(const Window &, const Window &)";
    "miral::operator==(const Window &, const std::shared_ptr<mir::scene::Surface> &)";
    "miral::operator==(const std::shared_ptr<mir::scene::Surface> &, const Window &)";
    "miral::operator>(const Window &, const Window &)";
    "miral::operator>=(const Window &, const Window &)";
    "miral::pid_of(const Application &)";
    "miral::pre_init(const ConfigurationOption &)";
    "miral::socket_fd_of(const Application &)";
    "miral::toolkit::mir_event_get_input_event(const MirEvent *)";
    "miral::toolkit::mir_event_get_type(const MirEvent *)";
    "miral::toolkit::mir_input_event_get_event(const MirInputEvent *)";
    "miral::toolkit::mir_input_event_get_event_time(const MirInputEvent *)";
    "miral::toolkit::mir_input_event_get_keyboard_event(const MirInputEvent *)";
    "miral::toolkit::mir_input_event_get_pointer_event(const MirInputEvent *)";
    "miral::toolkit::mir_input_event_get_touch_event(const MirInputEvent *)";
    "miral::toolkit::mir_input_event_get_type(const MirInputEvent *)";
    "miral::toolkit::mir_keyboard_event_action(const MirKeyboardEvent *)";
    "miral::toolkit::mir_keyboard_event_input_event(const MirKeyboardEvent *)";
    "miral::toolkit::mir_keyboard_event_key_text(const MirKeyboardEvent *)";
    "miral::toolkit::mir_keyboard_event_keysym(const MirKeyboardEvent *)";
    "miral::toolkit::mir_keyboard_event_modifiers(const MirKeyboardEvent *)";
    "miral::toolkit::mir_keyboard_event_scan_code(const MirKeyboardEvent *)";
    "miral::toolkit::mir_pointer_event_action(const MirPointerEvent *)";
    "miral::toolkit::mir_pointer_event_axis_value(const MirPointerEvent *, MirPointerAxis)";
    "miral::toolkit::mir_pointer_event_button_state(const MirPointerEvent *, MirPointerButton)";
    "miral::toolkit::mir_pointer_event_buttons(const MirPointerEvent *)";
    "miral::toolkit::mir_pointer_event_input_event(const MirPointerEvent *)";
    "miral::toolkit::mir_pointer_event_modifiers(const MirPointerEvent *)";
    "miral::toolkit::mir_touch_event_action(const MirTouchEvent *, unsigned int)";
    "miral::toolkit::mir_touch_event_axis_value(const MirTouchEvent *, unsigned int, MirTouchAxis)";
    "miral::toolkit::mir_touch_event_id(const MirTouchEvent *, unsigned int)";
    "miral::toolkit::mir_touch_event_input_event(const MirTouchEvent *)";
    "miral::toolkit::mir_touch_event_modifiers(const MirTouchEvent *)";
    "miral::toolkit::mir_touch_event_point_count(const MirTouchEvent *)";
    "miral::toolkit::mir_touch_event_tooltype(const MirTouchEvent *, unsigned int)";
    "miral::window_for(wl_resource *)";
    "non-virtual?thunk?to?miral::ApplicationAuthorizer::~ApplicationAuthorizer()";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::advise_focus_gained(const WindowInfo &)";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::confirm_inherited_move(const WindowInfo &, Displacement)";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::confirm_placement_on_display(const WindowInfo &, MirWindowState, const Rectangle &)";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::handle_modify_window(WindowInfo &, const WindowSpecification &)";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::handle_raise_window(WindowInfo &)";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::handle_window_ready(WindowInfo &)";
    "non-virtual?thunk?to?miral::CanonicalWindowManagerPolicy::place_new_window(const ApplicationInfo &, const WindowSpecification &)";
    "non-virtual?thunk?to?miral::FdHandle::~FdHandle()";
    "non-virtual?thunk?to?miral::MinimalWindowManager::advise_delete_app(const miral::ApplicationInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::advise_delete_window(const WindowInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::advise_focus_gained(const WindowInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::advise_focus_lost(const WindowInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::advise_new_app(miral::ApplicationInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::advise_new_window(const WindowInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::confirm_inherited_move(const WindowInfo &, Displacement)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::confirm_placement_on_display(const WindowInfo &, MirWindowState, const Rectangle &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_keyboard_event(const MirKeyboardEvent *)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_modify_window(WindowInfo &, const WindowSpecification &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_pointer_event(const MirPointerEvent *)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_raise_window(WindowInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_request_move(WindowInfo &, const MirInputEvent *)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_request_resize(WindowInfo &, const MirInputEvent *, MirResizeEdge)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_touch_event(const MirTouchEvent *)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::handle_window_ready(WindowInfo &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::place_new_window(const ApplicationInfo &, const WindowSpecification &)";
    "non-virtual?thunk?to?miral::MinimalWindowManager::~MinimalWindowManager()";
    "non-virtual?thunk?to?miral::WaylandExtensions::Context::~Context()";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_adding_to_workspace(const std::shared_ptr<Workspace> &, const int &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_application_zone_create(const Zone &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_application_zone_delete(const Zone &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_application_zone_update(const Zone &, const Zone &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_begin()";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_delete_app(const ApplicationInfo &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_delete_window(const WindowInfo &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_end()";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_focus_gained(const WindowInfo &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_focus_lost(const WindowInfo &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_move_to(const WindowInfo &, Point)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_new_app(ApplicationInfo &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_new_window(const WindowInfo &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_output_create(const Output &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_output_delete(const Output &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_output_update(const Output &, const Output &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_raise(const int &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_removing_from_workspace(const std::shared_ptr<Workspace> &, const int &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_resize(const WindowInfo &, const Size &)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::advise_state_change(const WindowInfo &, MirWindowState)";
    "non-virtual?thunk?to?miral::WindowManagementPolicy::~WindowManagementPolicy()";
    "swap(miral::WindowInfo &, miral::WindowInfo &)";
    typeinfo?for?miral::AddInitCallback;
    typeinfo?for?miral::AppendEventFilter;
    typeinfo?for?miral::ApplicationAuthorizer;
    typeinfo?for?miral::ApplicationCredentials;
    typeinfo?for?miral::ApplicationInfo;
    typeinfo?for?miral::BasicSetApplicationAuthorizer;
    typeinfo?for?miral::CanonicalWindowManagerPolicy;
    typeinfo?for?miral::ConfigurationOption;
    typeinfo?for?miral::CursorTheme;
    typeinfo?for?miral::DisplayConfiguration;
    typeinfo?for?miral::ExternalClientLauncher;
    typeinfo?for?miral::FdHandle;
    typeinfo?for?miral::InternalClientLauncher;
    typeinfo?for?miral::Keymap;
    typeinfo?for?miral::MinimalWindowManager;
    typeinfo?for?miral::MirRunner;
    typeinfo?for?miral::Output::PhysicalSizeMM;
    typeinfo?for?miral::Output;
    typeinfo?for?miral::PrependEventFilter;
    typeinfo?for?miral::SessionLockListener;
    typeinfo?for?miral::SetCommandLineHandler;
    typeinfo?for?miral::SetTerminator;
    typeinfo?for?miral::SetWindowManagementPolicy;
    typeinfo?for?miral::StartupInternalClient;
    typeinfo?for?miral::WaylandExtensions::Builder;
    typeinfo?for?miral::WaylandExtensions::Context;
    typeinfo?for?miral::WaylandExtensions::EnableInfo;
    typeinfo?for?miral::WaylandExtensions;
    typeinfo?for?miral::Window;
    typeinfo?for?miral::WindowInfo;
    typeinfo?for?miral::WindowManagementPolicy;
    typeinfo?for?miral::WindowManagerOption;
    typeinfo?for?miral::WindowManagerOptions;
    typeinfo?for?miral::WindowManagerTools;
    typeinfo?for?miral::WindowSpecification::AspectRatio;
    typeinfo?for?miral::WindowSpecification;
    typeinfo?for?miral::X11Support;
    typeinfo?for?miral::Zone;
    vtable?for?miral::AddInitCallback;
    vtable?for?miral::AppendEventFilter;
    vtable?for?miral::ApplicationAuthorizer;
    vtable?for?miral::ApplicationCredentials;
    vtable?for?miral::ApplicationInfo;
    vtable?for?miral::BasicSetApplicationAuthorizer;
    vtable?for?miral::CanonicalWindowManagerPolicy;
    vtable?for?miral::ConfigurationOption;
    vtable?for?miral::CursorTheme;
    vtable?for?miral::DisplayConfiguration;
    vtable?for?miral::ExternalClientLauncher;
    vtable?for?miral::FdHandle;
    vtable?for?miral::InternalClientLauncher;
    vtable?for?miral::Keymap;
    vtable?for?miral::MinimalWindowManager;
    vtable?for?miral::MirRunner;
    vtable?for?miral::Output::PhysicalSizeMM;
    vtable?for?miral::Output;
    vtable?for?miral::PrependEventFilter;
    vtable?for?miral::SessionLockListener;
    vtable?for?miral::SetCommandLineHandler;
    vtable?for?miral::SetTerminator;
    vtable?for?miral::SetWindowManagementPolicy;
    vtable?for?miral::StartupInternalClient;
    vtable?for?miral::WaylandExtensions::Builder;
    vtable?for?miral::WaylandExtensions::Context;
    vtable?for?miral::WaylandExtensions::EnableInfo;
    vtable?for?miral::WaylandExtensions;
    vtable?for?miral::Window;
    vtable?for?miral::WindowInfo;
    vtable?for?miral::WindowManagementPolicy;
    vtable?for?miral::WindowManagerOption;
    vtable?for?miral::WindowManagerOptions;
    vtable?for?miral::WindowManagerTools;
    vtable?for?miral::WindowSpecification::AspectRatio;
    vtable?for?miral::WindowSpecification;
    vtable?for?miral::X11Support;
    vtable?for?miral::Zone;
  };
local: *;
};