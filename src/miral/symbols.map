MIRAL_2.4 {
global:
  extern "C++" {
    "miral::WindowSpecification::min_width()";
    "miral::WindowSpecification::min_height()";
    "miral::WindowSpecification::max_width()";
    "miral::WindowSpecification::max_height()";
    "miral::WindowSpecification::width_inc()";
    "miral::WindowSpecification::height_inc()";
    "miral::WindowSpecification::min_aspect()";
    "miral::WindowSpecification::max_aspect()";
    "miral::WindowSpecification::depth_layer() const";
    "miral::WindowSpecification::depth_layer()";
    "miral::WindowSpecification::attached_edges() const";
    "miral::WindowSpecification::attached_edges()";
    "miral::WindowSpecification::exclusive_rect() const";
    "miral::WindowSpecification::exclusive_rect()";
    "miral::WindowSpecification::application_id[abi:cxx11]() const";
    "miral::WindowSpecification::application_id[abi:cxx11]()";
    "miral::WindowSpecification::server_side_decorated() const";
    "miral::WindowSpecification::server_side_decorated()";
    "miral::WindowSpecification::focus_mode()";
    "miral::WindowSpecification::WindowSpecification()";
    "miral::WindowSpecification::WindowSpecification(miral::WindowSpecification const&)";
    "miral::WindowSpecification::operator=(miral::WindowSpecification const&)";
    "miral::WindowSpecification::WindowSpecification(mir::shell::SurfaceSpecification const&)";
    "miral::WindowSpecification::~WindowSpecification()";
    "miral::WindowSpecification::top_left() const";
    "miral::WindowSpecification::size() const";
    "miral::WindowSpecification::name[abi:cxx11]() const";
    "miral::WindowSpecification::output_id() const";
    "miral::WindowSpecification::type() const";
    "miral::WindowSpecification::state() const";
    "miral::WindowSpecification::preferred_orientation() const";
    "miral::WindowSpecification::aux_rect() const";
    "miral::WindowSpecification::placement_hints() const";
    "miral::WindowSpecification::window_placement_gravity() const";
    "miral::WindowSpecification::aux_rect_placement_gravity() const";
    "miral::WindowSpecification::aux_rect_placement_offset() const";
    "miral::WindowSpecification::min_width() const";
    "miral::WindowSpecification::min_height() const";
    "miral::WindowSpecification::max_width() const";
    "miral::WindowSpecification::max_height() const";
    "miral::WindowSpecification::width_inc() const";
    "miral::WindowSpecification::height_inc() const";
    "miral::WindowSpecification::min_aspect() const";
    "miral::WindowSpecification::max_aspect() const";
    "miral::WindowSpecification::parent() const";
    "miral::WindowSpecification::input_shape() const";
    "miral::WindowSpecification::input_mode() const";
    "miral::WindowSpecification::shell_chrome() const";
    "miral::WindowSpecification::confine_pointer() const";
    "miral::WindowSpecification::userdata() const";
    "miral::WindowSpecification::top_left()";
    "miral::WindowSpecification::size()";
    "miral::WindowSpecification::name[abi:cxx11]()";
    "miral::WindowSpecification::output_id()";
    "miral::WindowSpecification::type()";
    "miral::WindowSpecification::state()";
    "miral::WindowSpecification::preferred_orientation()";
    "miral::WindowSpecification::aux_rect()";
    "miral::WindowSpecification::placement_hints()";
    "miral::WindowSpecification::window_placement_gravity()";
    "miral::WindowSpecification::aux_rect_placement_gravity()";
    "miral::WindowSpecification::aux_rect_placement_offset()";
    "miral::WindowSpecification::parent()";
    "miral::WindowSpecification::input_shape()";
    "miral::WindowSpecification::input_mode()";
    "miral::WindowSpecification::shell_chrome()";
    "miral::WindowSpecification::confine_pointer()";
    "miral::WindowSpecification::userdata()";
    "miral::DisplayConfiguration::DisplayConfiguration(miral::MirRunner const&)";
    "miral::DisplayConfiguration::layout_option()";
    "miral::DisplayConfiguration::select_layout(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::DisplayConfiguration::list_layouts[abi:cxx11]()";
    "miral::DisplayConfiguration::operator()(mir::Server&) const";
    "miral::DisplayConfiguration::~DisplayConfiguration()";
    "miral::DisplayConfiguration::DisplayConfiguration(miral::DisplayConfiguration const&)";
    "miral::DisplayConfiguration::operator=(miral::DisplayConfiguration const&)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (int)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (double)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, double)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (bool)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (mir::optional_value<int> const&)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (mir::optional_value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (mir::optional_value<bool> const&)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CommandLineOption::CommandLineOption(std::function<void (bool)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CommandLineOption::CommandLineOption(typename, Lambda&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CommandLineOption::operator()(mir::Server&) const";
    "miral::CommandLineOption::~CommandLineOption()";
    "miral::CommandLineOption::CommandLineOption(miral::CommandLineOption const&)";
    "miral::CommandLineOption::operator=(miral::CommandLineOption const&)";
    "miral::Keymap::Keymap()";
    "miral::Keymap::Keymap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::Keymap::~Keymap()";
    "miral::Keymap::Keymap(miral::Keymap const&)";
    "miral::Keymap::operator=(miral::Keymap const&)";
    "miral::Keymap::operator()(mir::Server&) const";
    "miral::Keymap::set_keymap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::X11Support::operator()(mir::Server&) const";
    "miral::X11Support::X11Support()";
    "miral::X11Support::~X11Support()";
    "miral::X11Support::X11Support(miral::X11Support const&)";
    "miral::X11Support::operator=(miral::X11Support const&)";
    "miral::Output::Output(mir::graphics::DisplayConfigurationOutput const&)";
    "miral::Output::Output(miral::Output const&)";
    "miral::Output::operator=(miral::Output const&)";
    "miral::Output::~Output()";
    "miral::Output::type() const";
    "miral::Output::physical_size_mm() const";
    "miral::Output::connected() const";
    "miral::Output::used() const";
    "miral::Output::pixel_format() const";
    "miral::Output::refresh_rate() const";
    "miral::Output::power_mode() const";
    "miral::Output::orientation() const";
    "miral::Output::scale() const";
    "miral::Output::form_factor() const";
    "miral::Output::extents() const";
    "miral::Output::id() const";
    "miral::Output::valid() const";
    "miral::Output::is_same_output(miral::Output const&) const";
    "miral::Output::logical_group_id() const";
    "miral::AppendEventFilter::AppendEventFilter(std::function<int (MirEvent const*)> const&)";
    "miral::AppendEventFilter::operator()(mir::Server&)";
    "miral::WindowManagementPolicy::handle_window_ready(miral::WindowInfo&)";
    "miral::WindowManagementPolicy::handle_modify_window(miral::WindowInfo&, miral::WindowSpecification const&)";
    "miral::WindowManagementPolicy::handle_raise_window(miral::WindowInfo&)";
    "miral::WindowManagementPolicy::confirm_placement_on_display(miral::WindowInfo const&, MirWindowState, mir::geometry::Rectangle const&)";
    "miral::WindowManagementPolicy::handle_keyboard_event(MirKeyboardEvent const*)";
    "miral::WindowManagementPolicy::handle_touch_event(MirTouchEvent const*)";
    "miral::WindowManagementPolicy::handle_pointer_event(MirPointerEvent const*)";
    "miral::WindowManagementPolicy::advise_new_app(miral::ApplicationInfo&)";
    "miral::WindowManagementPolicy::advise_delete_app(miral::ApplicationInfo const&)";
    "miral::WindowManagementPolicy::advise_new_window(miral::WindowInfo const&)";
    "miral::WindowManagementPolicy::advise_focus_lost(miral::WindowInfo const&)";
    "miral::WindowManagementPolicy::advise_focus_gained(miral::WindowInfo const&)";
    "miral::WindowManagementPolicy::advise_state_change(miral::WindowInfo const&, MirWindowState)";
    "miral::WindowManagementPolicy::advise_move_to(miral::WindowInfo const&, mir::geometry::Point)";
    "miral::WindowManagementPolicy::advise_resize(miral::WindowInfo const&, mir::geometry::Size const&)";
    "miral::WindowManagementPolicy::advise_delete_window(miral::WindowInfo const&)";
    "miral::WindowManagementPolicy::advise_raise(std::vector<miral::Window, std::allocator<miral::Window> > const&)";
    "miral::WindowManagementPolicy::advise_adding_to_workspace(std::shared_ptr<miral::Workspace> const&, std::vector<miral::Window, std::allocator<miral::Window> > const&)";
    "miral::WindowManagementPolicy::advise_removing_from_workspace(std::shared_ptr<miral::Workspace> const&, std::vector<miral::Window, std::allocator<miral::Window> > const&)";
    "miral::WindowManagementPolicy::handle_request_drag_and_drop(miral::WindowInfo&)";
    "miral::WindowManagementPolicy::handle_request_move(miral::WindowInfo&, MirInputEvent const*)";
    "miral::WindowManagementPolicy::handle_request_resize(miral::WindowInfo&, MirInputEvent const*, MirResizeEdge)";
    "miral::WindowManagementPolicy::advise_output_create(miral::Output const&)";
    "miral::WindowManagementPolicy::advise_output_update(miral::Output const&, miral::Output const&)";
    "miral::WindowManagementPolicy::advise_output_delete(miral::Output const&)";
    "miral::WindowManagementPolicy::advise_application_zone_create(miral::Zone const&)";
    "miral::WindowManagementPolicy::advise_application_zone_update(miral::Zone const&, miral::Zone const&)";
    "miral::WindowManagementPolicy::advise_application_zone_delete(miral::Zone const&)";
    "miral::WindowManagementPolicy::advise_begin()";
    "miral::WindowManagementPolicy::advise_end()";
    "miral::WindowManagementPolicy::place_new_window(miral::ApplicationInfo const&, miral::WindowSpecification const&)";
    "miral::WindowManagementPolicy::confirm_inherited_move(miral::WindowInfo const&, mir::geometry::Displacement)";
    "miral::WindowManagementPolicy::~WindowManagementPolicy()";
    "miral::WindowManagementPolicy::WindowManagementPolicy()";
    "miral::WindowManagementPolicy::WindowManagementPolicy(miral::WindowManagementPolicy const&)";
    "miral::WindowManagementPolicy::operator=(miral::WindowManagementPolicy const&)";
    "vtable for miral::WindowManagementPolicy";
    "typeinfo for miral::WindowManagementPolicy";
    "miral::CanonicalWindowManagerPolicy::CanonicalWindowManagerPolicy(miral::WindowManagerTools const&)";
    "miral::CanonicalWindowManagerPolicy::place_new_window(miral::ApplicationInfo const&, miral::WindowSpecification const&)";
    "miral::CanonicalWindowManagerPolicy::handle_window_ready(miral::WindowInfo&)";
    "miral::CanonicalWindowManagerPolicy::handle_modify_window(miral::WindowInfo&, miral::WindowSpecification const&)";
    "miral::CanonicalWindowManagerPolicy::handle_raise_window(miral::WindowInfo&)";
    "miral::CanonicalWindowManagerPolicy::handle_request_drag_and_drop(miral::WindowInfo&)";
    "miral::CanonicalWindowManagerPolicy::advise_focus_gained(miral::WindowInfo const&)";
    "miral::CanonicalWindowManagerPolicy::confirm_inherited_move(miral::WindowInfo const&, mir::geometry::Displacement)";
    "miral::CanonicalWindowManagerPolicy::confirm_placement_on_display(miral::WindowInfo const&, MirWindowState, mir::geometry::Rectangle const&)";
    "vtable for miral::CanonicalWindowManagerPolicy";
    "typeinfo for miral::CanonicalWindowManagerPolicy";
    "miral::StartupInternalClient::StartupInternalClient(std::function<void (wl_display*)>, std::function<void (std::weak_ptr<mir::scene::Session>)>)";
    "miral::StartupInternalClient::StartupInternalClient(typename, ClientObject const&)";
    "miral::StartupInternalClient::~StartupInternalClient()";
    "miral::StartupInternalClient::operator()(mir::Server&)";
    "miral::MirRunner::config_file[abi:cxx11]() const";
    "miral::MirRunner::display_config_file[abi:cxx11]() const";
    "miral::MirRunner::MirRunner(int, char const**)";
    "miral::MirRunner::MirRunner(int, char const**, char const*)";
    "miral::MirRunner::~MirRunner()";
    "miral::MirRunner::add_start_callback(std::function<void ()> const&)";
    "miral::MirRunner::add_stop_callback(std::function<void ()> const&)";
    "miral::MirRunner::set_exception_handler(std::function<void ()> const&)";
    "miral::MirRunner::run_with(std::initializer_list<std::function<void (mir::Server&)> >)";
    "miral::MirRunner::stop()";
    "miral::SetWindowManagementPolicy::SetWindowManagementPolicy(std::function<std::unique_ptr<miral::WindowManagementPolicy, std::default_delete<miral::WindowManagementPolicy> > (miral::WindowManagerTools const&)> const&)";
    "miral::SetWindowManagementPolicy::~SetWindowManagementPolicy()";
    "miral::SetWindowManagementPolicy::operator()(mir::Server&) const";
    "miral::WindowManagerTools::count_applications() const";
    "miral::WindowManagerTools::for_each_application(std::function<void (miral::ApplicationInfo&)> const&)";
    "miral::WindowManagerTools::find_application(std::function<bool (miral::ApplicationInfo const&)> const&)";
    "miral::WindowManagerTools::info_for(std::weak_ptr<mir::scene::Session> const&) const";
    "miral::WindowManagerTools::info_for(std::weak_ptr<mir::scene::Surface> const&) const";
    "miral::WindowManagerTools::info_for(miral::Window const&) const";
    "miral::WindowManagerTools::info_for_window_id(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const";
    "miral::WindowManagerTools::id_for_window[abi:cxx11](miral::Window const&) const";
    "miral::WindowManagerTools::ask_client_to_close(miral::Window const&)";
    "miral::WindowManagerTools::active_window() const";
    "miral::WindowManagerTools::select_active_window(miral::Window const&)";
    "miral::WindowManagerTools::drag_active_window(mir::geometry::Displacement)";
    "miral::WindowManagerTools::drag_window(miral::Window const&, mir::geometry::Displacement)";
    "miral::WindowManagerTools::focus_next_application()";
    "miral::WindowManagerTools::focus_next_within_application()";
    "miral::WindowManagerTools::focus_prev_within_application()";
    "miral::WindowManagerTools::window_at(mir::geometry::Point) const";
    "miral::WindowManagerTools::active_output()";
    "miral::WindowManagerTools::raise_tree(miral::Window const&)";
    "miral::WindowManagerTools::start_drag_and_drop(miral::WindowInfo&, std::vector<uint8_t, std::allocator<uint8_t> > const&)";
    "miral::WindowManagerTools::end_drag_and_drop()";
    "miral::WindowManagerTools::modify_window(miral::WindowInfo&, miral::WindowSpecification const&)";
    "miral::WindowManagerTools::modify_window(miral::Window const&, miral::WindowSpecification const&)";
    "miral::WindowManagerTools::place_and_size_for_state(miral::WindowSpecification&, miral::WindowInfo const&) const";
    "miral::WindowManagerTools::create_workspace()";
    "miral::WindowManagerTools::add_tree_to_workspace(miral::Window const&, std::shared_ptr<miral::Workspace> const&)";
    "miral::WindowManagerTools::remove_tree_from_workspace(miral::Window const&, std::shared_ptr<miral::Workspace> const&)";
    "miral::WindowManagerTools::move_workspace_content_to_workspace(std::shared_ptr<miral::Workspace> const&, std::shared_ptr<miral::Workspace> const&)";
    "miral::WindowManagerTools::for_each_workspace_containing(miral::Window const&, std::function<void (std::shared_ptr<miral::Workspace> const&)> const&)";
    "miral::WindowManagerTools::for_each_window_in_workspace(std::shared_ptr<miral::Workspace> const&, std::function<void (miral::Window const&)> const&)";
    "miral::WindowManagerTools::WindowManagerTools(miral::WindowManagerToolsImplementation*)";
    "miral::WindowManagerTools::WindowManagerTools(miral::WindowManagerTools const&)";
    "miral::WindowManagerTools::operator=(miral::WindowManagerTools const&)";
    "miral::WindowManagerTools::~WindowManagerTools()";
    "miral::WindowManagerTools::invoke_under_lock(std::function<void ()> const&)";
    "miral::toolkit::mir_event_get_type(MirEvent const*)";
    "miral::toolkit::mir_event_get_input_event(MirEvent const*)";
    "miral::toolkit::mir_input_event_get_event_time(MirInputEvent const*)";
    "miral::toolkit::mir_input_event_get_type(MirInputEvent const*)";
    "miral::toolkit::mir_input_event_get_keyboard_event(MirInputEvent const*)";
    "miral::toolkit::mir_input_event_get_touch_event(MirInputEvent const*)";
    "miral::toolkit::mir_input_event_get_pointer_event(MirInputEvent const*)";
    "miral::toolkit::mir_input_event_has_cookie(MirInputEvent const*)";
    "miral::toolkit::mir_input_event_get_event(MirInputEvent const*)";
    "miral::toolkit::mir_keyboard_event_action(MirKeyboardEvent const*)";
    "miral::toolkit::mir_keyboard_event_key_code(MirKeyboardEvent const*)";
    "miral::toolkit::mir_keyboard_event_scan_code(MirKeyboardEvent const*)";
    "miral::toolkit::mir_keyboard_event_modifiers(MirKeyboardEvent const*)";
    "miral::toolkit::mir_keyboard_event_input_event(MirKeyboardEvent const*)";
    "miral::toolkit::mir_touch_event_modifiers(MirTouchEvent const*)";
    "miral::toolkit::mir_touch_event_point_count(MirTouchEvent const*)";
    "miral::toolkit::mir_touch_event_id(MirTouchEvent const*, unsigned int)";
    "miral::toolkit::mir_touch_event_action(MirTouchEvent const*, unsigned int)";
    "miral::toolkit::mir_touch_event_tooltype(MirTouchEvent const*, unsigned int)";
    "miral::toolkit::mir_touch_event_axis_value(MirTouchEvent const*, unsigned int, MirTouchAxis)";
    "miral::toolkit::mir_touch_event_input_event(MirTouchEvent const*)";
    "miral::toolkit::mir_pointer_event_modifiers(MirPointerEvent const*)";
    "miral::toolkit::mir_pointer_event_action(MirPointerEvent const*)";
    "miral::toolkit::mir_pointer_event_button_state(MirPointerEvent const*, MirPointerButton)";
    "miral::toolkit::mir_pointer_event_buttons(MirPointerEvent const*)";
    "miral::toolkit::mir_pointer_event_axis_value(MirPointerEvent const*, MirPointerAxis)";
    "miral::toolkit::mir_pointer_event_input_event(MirPointerEvent const*)";
    "miral::WindowInfo::min_width() const";
    "miral::WindowInfo::min_height() const";
    "miral::WindowInfo::max_width() const";
    "miral::WindowInfo::max_height() const";
    "miral::WindowInfo::width_inc() const";
    "miral::WindowInfo::height_inc() const";
    "miral::WindowInfo::min_aspect() const";
    "miral::WindowInfo::max_aspect() const";
    "miral::WindowInfo::WindowInfo()";
    "miral::WindowInfo::WindowInfo(miral::Window const&, miral::WindowSpecification const&)";
    "miral::WindowInfo::~WindowInfo()";
    "miral::WindowInfo::WindowInfo(miral::WindowInfo const&)";
    "miral::WindowInfo::operator=(miral::WindowInfo const&)";
    "miral::WindowInfo::can_be_active() const";
    "miral::WindowInfo::can_morph_to(MirWindowType) const";
    "miral::WindowInfo::must_have_parent() const";
    "miral::WindowInfo::must_not_have_parent() const";
    "miral::WindowInfo::is_visible() const";
    "miral::WindowInfo::constrain_resize(mir::geometry::Point&, mir::geometry::Size&) const";
    "miral::WindowInfo::window() const";
    "miral::WindowInfo::name[abi:cxx11]() const";
    "miral::WindowInfo::type() const";
    "miral::WindowInfo::state() const";
    "miral::WindowInfo::restore_rect() const";
    "miral::WindowInfo::parent() const";
    "miral::WindowInfo::children() const";
    "miral::WindowInfo::has_output_id() const";
    "miral::WindowInfo::output_id() const";
    "miral::WindowInfo::preferred_orientation() const";
    "miral::WindowInfo::confine_pointer() const";
    "miral::WindowInfo::shell_chrome() const";
    "miral::WindowInfo::userdata() const";
    "miral::WindowInfo::userdata(std::shared_ptr<void>)";
    "miral::WindowInfo::swap(miral::WindowInfo&)";
    "miral::WindowInfo::depth_layer() const";
    "miral::WindowInfo::attached_edges() const";
    "miral::WindowInfo::exclusive_rect() const";
    "miral::WindowInfo::clip_area() const";
    "miral::WindowInfo::clip_area(mir::optional_value<mir::geometry::Rectangle> const&)";
    "miral::WindowInfo::needs_titlebar(MirWindowType)";
    "miral::CursorTheme::CursorTheme(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
    "miral::CursorTheme::~CursorTheme()";
    "miral::CursorTheme::operator()(mir::Server&) const";
    "miral::InternalClientLauncher::InternalClientLauncher()";
    "miral::InternalClientLauncher::~InternalClientLauncher()";
    "miral::InternalClientLauncher::operator()(mir::Server&)";
    "miral::InternalClientLauncher::launch(std::function<void (wl_display*)> const&, std::function<void (std::weak_ptr<mir::scene::Session>)> const&) const";
    "miral::InternalClientLauncher::launch(typename, ClientObject&) const";
    "::SetApplicationAuthorizer(typename..., Args const&...)";
    "::the_custom_application_authorizer() const";
    "miral::Zone::Zone(mir::geometry::Rectangle const&)";
    "miral::Zone::Zone(miral::Zone const&)";
    "miral::Zone::operator=(miral::Zone const&)";
    "miral::Zone::~Zone()";
    "miral::Zone::operator==(miral::Zone const&) const";
    "miral::Zone::is_same_zone(miral::Zone const&) const";
    "miral::Zone::extents() const";
    "miral::Zone::extents(mir::geometry::Rectangle const&)";
    "miral::BasicSetApplicationAuthorizer::BasicSetApplicationAuthorizer(std::function<std::shared_ptr<miral::ApplicationAuthorizer> ()> const&)";
    "miral::BasicSetApplicationAuthorizer::~BasicSetApplicationAuthorizer()";
    "miral::BasicSetApplicationAuthorizer::operator()(mir::Server&)";
    "miral::BasicSetApplicationAuthorizer::the_application_authorizer() const";
    "miral::apply_lifecycle_state_to(std::shared_ptr<mir::scene::Session> const&, MirLifecycleState)";
    "miral::kill(std::shared_ptr<mir::scene::Session> const&, int)";
    "miral::name_of[abi:cxx11](std::shared_ptr<mir::scene::Session> const&)";
    "miral::pid_of(std::shared_ptr<mir::scene::Session> const&)";
    "miral::pre_init(miral::CommandLineOption const&)";
    "miral::display_configuration_options(mir::Server&)";
    "miral::operator==(miral::Output::PhysicalSizeMM const&, miral::Output::PhysicalSizeMM const&)";
    "miral::equivalent_display_area(miral::Output const&, miral::Output const&)";
    "miral::operator==(miral::Window const&, miral::Window const&)";
    "miral::operator==(std::shared_ptr<mir::scene::Surface> const&, miral::Window const&)";
    "miral::operator==(miral::Window const&, std::shared_ptr<mir::scene::Surface> const&)";
    "miral::operator<(miral::Window const&, miral::Window const&)";
    "miral::ApplicationInfo::ApplicationInfo()";
    "miral::ApplicationInfo::ApplicationInfo(std::shared_ptr<mir::scene::Session> const&)";
    "miral::ApplicationInfo::~ApplicationInfo()";
    "miral::ApplicationInfo::ApplicationInfo(miral::ApplicationInfo const&)";
    "miral::ApplicationInfo::operator=(miral::ApplicationInfo const&)";
    "miral::ApplicationInfo::name[abi:cxx11]() const";
    "miral::ApplicationInfo::application() const";
    "miral::ApplicationInfo::windows() const";
    "miral::ApplicationInfo::userdata() const";
    "miral::ApplicationInfo::userdata(std::shared_ptr<void>)";
    "miral::ApplicationCredentials::ApplicationCredentials(mir::frontend::SessionCredentials const&)";
    "miral::ApplicationCredentials::pid() const";
    "miral::ApplicationCredentials::uid() const";
    "miral::ApplicationCredentials::gid() const";
    "miral::WaylandExtensions::WaylandExtensions()";
    "miral::WaylandExtensions::operator()(mir::Server&) const";
    "miral::WaylandExtensions::~WaylandExtensions()";
    "miral::WaylandExtensions::WaylandExtensions(miral::WaylandExtensions const&)";
    "miral::WaylandExtensions::operator=(miral::WaylandExtensions const&)";
    "miral::ExternalClientLauncher::ExternalClientLauncher()";
    "miral::ExternalClientLauncher::~ExternalClientLauncher()";
    "miral::ExternalClientLauncher::operator()(mir::Server&)";
    "miral::ExternalClientLauncher::launch(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) const";
    "miral::ExternalClientLauncher::launch_using_x11(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) const";
    "miral::WindowManagerOptions::WindowManagerOptions()";
    "miral::WindowManagerOptions::WindowManagerOptions(std::initializer_list<miral::WindowManagerOption> const&)";
    "miral::WindowManagerOptions::operator()(mir::Server&) const";
  };
local: *;
};

MIRAL_2.5 {
global:
  extern "C++" {
    "miral::MinimalWindowManager::MinimalWindowManager(miral::WindowManagerTools const&)";
    "miral::MinimalWindowManager::~MinimalWindowManager()";
    "miral::MinimalWindowManager::place_new_window(miral::ApplicationInfo const&, miral::WindowSpecification const&)";
    "miral::MinimalWindowManager::handle_window_ready(miral::WindowInfo&)";
    "miral::MinimalWindowManager::handle_modify_window(miral::WindowInfo&, miral::WindowSpecification const&)";
    "miral::MinimalWindowManager::handle_raise_window(miral::WindowInfo&)";
    "miral::MinimalWindowManager::confirm_placement_on_display(miral::WindowInfo const&, MirWindowState, mir::geometry::Rectangle const&)";
    "miral::MinimalWindowManager::handle_keyboard_event(MirKeyboardEvent const*)";
    "miral::MinimalWindowManager::handle_touch_event(MirTouchEvent const*)";
    "miral::MinimalWindowManager::handle_pointer_event(MirPointerEvent const*)";
    "miral::MinimalWindowManager::handle_request_drag_and_drop(miral::WindowInfo&)";
    "miral::MinimalWindowManager::handle_request_move(miral::WindowInfo&, MirInputEvent const*)";
    "miral::MinimalWindowManager::handle_request_resize(miral::WindowInfo&, MirInputEvent const*, MirResizeEdge)";
    "miral::MinimalWindowManager::confirm_inherited_move(miral::WindowInfo const&, mir::geometry::Displacement)";
    "miral::MinimalWindowManager::advise_focus_gained(miral::WindowInfo const&)";
    "miral::MinimalWindowManager::begin_pointer_move(miral::WindowInfo const&, MirInputEvent const*)";
    "miral::MinimalWindowManager::begin_pointer_resize(miral::WindowInfo const&, MirInputEvent const*, MirResizeEdge const&)";
    "miral::MinimalWindowManager::begin_touch_move(miral::WindowInfo const&, MirInputEvent const*)";
    "miral::MinimalWindowManager::begin_touch_resize(miral::WindowInfo const&, MirInputEvent const*, MirResizeEdge const&)";
    "vtable for miral::MinimalWindowManager";
    "typeinfo for miral::MinimalWindowManager";
    "miral::WindowManagerTools::focus_prev_application()";
    "miral::WaylandExtensions::Context::display() const";
    "miral::WaylandExtensions::Context::run_on_wayland_mainloop(std::function<void ()>&&) const";
    "miral::WaylandExtensions::Context::Context()";
    "miral::WaylandExtensions::Context::~Context()";
    "miral::WaylandExtensions::Context::Context(miral::WaylandExtensions::Context const&)";
    "miral::WaylandExtensions::Context::operator=(miral::WaylandExtensions::Context const&)";
    "vtable for miral::WaylandExtensions::Context";
    "typeinfo for miral::WaylandExtensions::Context";
    "miral::application_for(wl_client*)";
    "miral::application_for(wl_resource*)";
    "miral::window_for(wl_resource*)";
    "miral::WaylandExtensions::set_filter(std::function<bool (std::shared_ptr<mir::scene::Session> const&, char const*)> const&)";
    "miral::WaylandExtensions::add_extension(miral::WaylandExtensions::Builder const&)";
    "miral::WaylandExtensions::add_extension_disabled_by_default(miral::WaylandExtensions::Builder const&)";
  };
} MIRAL_2.4;

MIRAL_2.6 {
global:
  extern "C++" {
    "miral::WaylandExtensions::zwlr_layer_shell_v1";
    "miral::WaylandExtensions::zxdg_output_manager_v1";
    "miral::WaylandExtensions::enable(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)";
    "miral::WaylandExtensions::disable(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)";
    "miral::WaylandExtensions::recommended[abi:cxx11]()";
    "miral::WaylandExtensions::supported[abi:cxx11]()";
  };
} MIRAL_2.5;

MIRAL_2.8 {
global:
  extern "C++" {
    "miral::MirRunner::wayland_display[abi:cxx11]() const";
    "miral::MirRunner::x11_display[abi:cxx11]() const";
    "miral::WindowInfo::application_id[abi:cxx11]() const";
  };
} MIRAL_2.6;

MIRAL_3.0 {
global:
  extern "C++" {
    "miral::WindowManagerTools::active_application_zone() const";
    "miral::Window::resize(mir::geometry::Size const&)";
    "miral::Window::move_to(mir::geometry::Point)";
    "miral::Window::operator std::weak_ptr<mir::scene::Surface>() const";
    "miral::Window::operator std::shared_ptr<mir::scene::Surface>() const";
    "miral::Window::Window()";
    "miral::Window::Window(std::shared_ptr<mir::scene::Session> const&, std::shared_ptr<mir::scene::Surface> const&)";
    "miral::Window::~Window()";
    "miral::Window::top_left() const";
    "miral::Window::size() const";
    "miral::Window::application() const";
    "miral::Window::operator bool() const";
    "miral::WaylandExtensions::all_supported[abi:cxx11]() const";
    "miral::ExternalClientLauncher::snapcraft_launch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const";
  };
} MIRAL_2.8;

MIRAL_3.1 {
global:
  extern "C++" {
    "miral::WaylandExtensions::zwlr_foreign_toplevel_manager_v1";
  };
} MIRAL_3.0;

MIRAL_3.3 {
global:
  extern "C++" {
    "miral::WindowSpecification::focus_mode() const";
    "miral::toolkit::mir_keyboard_event_keysym(MirKeyboardEvent const*)";
    "miral::WindowInfo::focus_mode() const";
    "miral::PrintTo(miral::Window const&, std::ostream*)";
    "miral::WaylandExtensions::zwp_virtual_keyboard_v1";
  };
} MIRAL_3.1;

MIRAL_3.4 {
global:
  extern "C++" {
    "miral::socket_fd_of(std::shared_ptr<mir::scene::Session> const&)";
    "miral::WaylandExtensions::EnableInfo::app() const";
    "miral::WaylandExtensions::EnableInfo::name() const";
    "miral::WaylandExtensions::EnableInfo::user_preference() const";
    "miral::WaylandExtensions::zwp_virtual_keyboard_manager_v1";
    "miral::WaylandExtensions::zwp_input_method_manager_v2";
    "miral::WaylandExtensions::conditionally_enable(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::function<bool (miral::WaylandExtensions::EnableInfo const&)> const&)";
  };
} MIRAL_3.3;

MIRAL_3.5 {
global:
  extern "C++" {
    "miral::WaylandExtensions::zwlr_screencopy_manager_v1";
  };
} MIRAL_3.4;

