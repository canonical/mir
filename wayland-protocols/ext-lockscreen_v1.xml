<?xml version="1.0" encoding="UTF-8"?>
<protocol name="ext-lockscreen_v1">
  <copyright>    
    Copyright Â© Canonical Ltd.

    This program is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License version 2 or 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  </copyright>
  <description summary="compositor authoritative screen-locking mechanism">
    This protocol allows for a priveleged Wayland client to display arbitrary graphics
    on the screen when the compositor informs the client that the session has been
    locked.

    The compositor may choose to restrict this protocol to a special client
    launched by the compositor itself or expose it to all privileged clients.
    This is up to the compositor policy.

    The compositor is responsible for deciding when the session should be locked and unlocked.
    If the client dies while the session is locked, the client may simply reregister and
    submit buffers for display at a later time. During this time, the compositor itself
    may have been unlocked via some other mechanism (e.g. loginctl). Exactly how and
    when the compositor locks and unlocks is the policy of the compositor.

    A typical use case is for the compositor to lock or unlock when it receives a
    signal from Logind to do so.

    The key words "must", "must not", "required", "shall", "shall not",
    "should", "should not", "recommended",  "may", and "optional" in this
    document are to be interpreted as described in IETF RFC 2119.
  </description>

  <interface name="ext_lockscreen_manager_v1" version="1">
    <description summary="used to create lockscreen surfaces">
      This interface is responsible for registering clients who wish to be treated as the
      lockscreen. Only one client may be treated as the lockscreen at a time.
    </description>

    <request name="register">
      This request creates a new lockscreen client. While the session is locked,
      the compositor will (1) obfuscate the screen according to its own policy,
      and (2) only render lockscreen surfaces created by the registered client. If the client
      has already submitted lockscreen surfaces before locking happens, those surfaces
      will be shown immediately alongside the obfuscation surface.

      The compositor's internal screen obfuscation must render at the lowest possible
      Z-index in order to provide the client with the remainder of the screen on
      which to render.

      If the client dies while the compositor is locked, the compositor will continue
      to render an obfuscated screen according to the policy of the compositor. In the
      meantime, a new lockscreen client may register itself and begin rendering the
      lockscreen.

      Registering more than one client is a duplicate_registration error.
      
      <arg name="id" type="new_id" interface="ext_lockscreen_client_v1"/>
    </request>

    <enum name="error">
      <entry name="duplicate_registration" value="0"
             summary="attempted to register more than once lockscreen client"/>
    </enum>
  </interface>

  <interface name="ext_lockscreen_client_v1" version="1">
    <description>
      The lockscreen client is responsible for creating lockscreen surfaces that will
      be shown when the screen is locked.

      The client may create a surface at any time, but the compositor must NOT display
      the surface unless the session is locked.

      When the session is locked, the compositor will display all surfaces that were
      spawned by the lockscreen client, including new surfaces as they are submitted.

      When the session is unlocked, the compositor will hide all surfaces that were
      spawned by the lockscreen client.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the lock surface object">
        This informs the compositor that the lockscreen client will no longer be used.
        After this, another lockscreen client may request to register as the lockscreen
        client.

        All surfaces associated with this client will also be destroyed at this time.
      </description>
    </request>

    <request name="create_surface">
      This request creates a new surface that will be shown when the session is locked.
      The client may call this method at any time, but the surface will only be shown
      on the screen if and when the session is locked.

      It is recommended that this request is only called after ack_locked is sent to
      the compositor, as creating multiple unused surfaces that are not shown on
      the screen may have a high memory footprint. However, this decision is left to
      the client.
      
      <arg name="id" type="new_id" interface="ext_lockscreen_surface_v1"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <event name="locked">
      This event is sent when the compositor decides to lock the session. Before sending
      this event, the compositor will obfuscate the contents of the screen according to
      the policy of the compositor. The compositor will also show the surfaces that this
      client had submitted before the session was locked.
    </event>
    <event name="unlocked">
      This event is sent when the compositor decides to unlock the session. Upon sending
      this event, the compositor will remove its internal screen obfuscation mechanism
      and hide the buffers created by this client.
      
      Afterward, the compositor will render the pre-lock contents again. 
    </event>
  </interface>

  <interface name="ext_lockscreen_surface_v1" version="1">
    <description>
      This interface describes a surface that will be shown when the session is locked.
      This surface CANNOT be shown by the compositor at any other time.
    </description>

    <request name="destroy" type="destructor">
      This informs the compositor that the lockscreen surface wil no longer be used.
    </request>
  </interface>

</protocol>
