environment:
    DEB_BUILD_OPTIONS: "parallel=$( nproc ) noopt ${DEB_BUILD_EXTRA}"
    NO_PKG_MANGLE: 1

systems: [ubuntu-*]
variants:
- -ubuntu*
- -debian*

summary: Build Ubuntu packages

execute: |
    cd $SPREAD_PATH

    NODBG=$( [[ "${DEB_BUILD_OPTIONS}" != *nostrip* ]] && echo true || echo false )

    # Add Mir dev PPA for any out-of-archive packages needed
    # (Currently: a newer version of WLCS)
    add-apt-repository ppa:mir-team/dev --component "main $( $NODBG || echo main/debug )"

    # to get dpkg-architecture and mk-build-deps
    apt-get install \
      --yes \
      ccache \
      devscripts \
      dpkg-dev \
      $( $NODBG || echo wlcs-dbgsym )

    # set host and build environment up
    source <( dpkg-architecture --print-set --host-arch ${ARCH} )

    # if cross-building
    if [ "${DEB_BUILD_ARCH}" != "${DEB_HOST_ARCH}" ]; then
        # add host architecture
        dpkg --add-architecture "${DEB_HOST_ARCH}"

        # don't run tests
        DEB_BUILD_OPTIONS="${DEB_BUILD_OPTIONS} nocheck"

        # limit existing apt sources to build architecture
        sed -i "s/^deb \(\[arch=.*\] \)\?/deb [arch=${DEB_BUILD_ARCH}] /" \
          /etc/apt/sources.list

        case "${DEB_HOST_ARCH}" in
          amd64|i386)
            ARCHIVE_URL="http://archive.ubuntu.com/ubuntu"
            ;;
          *)
            ARCHIVE_URL="http://ports.ubuntu.com/ubuntu-ports"
            ;;
        esac

        # add host architecture apt sources
        printf "deb [arch=${DEB_HOST_ARCH}] ${ARCHIVE_URL} \
          %s main multiverse universe restricted\n" \
          $(lsb_release -sc){,-security,-updates} \
        > /etc/apt/sources.list.d/cross-${DEB_HOST_ARCH}.list

        apt-get update
        apt-get --yes install qemu-user-static binfmt-support
    fi

    # Mark the "release" in the changelog
    debchange --release "CI release"

    # install dependencies
    apt-get build-dep --yes ./

    # use clang
    if [ "${CLANG}" -eq 1 ]; then
      apt-get install --yes --no-install-recommends clang
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_C_COMPILER=clang" >> debian/opts.mk
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_CXX_COMPILER=clang++" >> debian/opts.mk
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_CXX_FLAGS=-fpch-validate-input-files-content" >> debian/opts.mk
    fi

    # enable valgrind
    if [ "${VALGRIND}" -eq 1 ]; then
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DENABLE_MEMCHECK_OPTION=ON" >> debian/opts.mk
    fi

    # change the build type
    echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_BUILD_TYPE=${BUILD_TYPE}" >> debian/opts.mk

    # use ccache
    echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_C_COMPILER_LAUNCHER=ccache" >> debian/opts.mk
    echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_CXX_COMPILER_LAUNCHER=ccache" >> debian/opts.mk

    # build and run tests
    UBSAN_OPTIONS=halt_on_error=1 ASAN_OPTIONS=detect_leaks=0 debian/rules build

    ccache --show-stats --zero-stats > ${CCACHE_DIR}/ccache.stats
